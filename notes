Sat Feb  9 10:54:44 CST 2013
Let's see how many TCYs it takes for the TRMT bit to toggle. TRMT is TXSTA,1 and it
toggles from set to clear when TXREG is passed on to the TSR, then, when TSR is done
shifting out the value through TX (RB7), TRMT toggles back from clear to set.
The question is: How many TCYs does it take for TRMT to toggle from set to clear, after
writing a byte to TXREG?
This question can be answered by:
	1. Writing a byte to TXREG
	2. Immedeately shifting to TRMT's bank
	3. Storing the value of TRMT in bits 0, 1, ... ,7 of some register
	4. Writing the value of 3.'s register to PORTC, for visual confirmation.
	5. Going back to 1.
It is possible that, because it's necessary to
	banksel		TXSTA
after writing to TXREG (because TXREG and TXSTA are in different banks), it would be
impossible for TRMT to hold invalid results. Maybe changing the clock freq from 4MHz
to something higher would create a disparity between INTOSC and the clock EUSART uses.
Is this true? Check datasheet.
Ok, for a FOSC of 4MHz, there is no invalid value of TRMT. The result of
	make && make prog && make run
is the pattern B'001111??' in PORTC,0 - PORTC,7
The last 2 bits were not tested because the important bits are the first ones before the
toggle.
This visual test shows that TRMT does not show invalid results at the first two
	btfsc		TXSTA,1
tests. Indeed: TXSTA,1 is low while TSR is busy, and goes back to high when TSR is free.
Ofcourse, it is possible that PORTC,0 is just oscilating so fast, that the oscillation
is invisible through this method, but only a sensitive oscilloscope or some other
equipment to test for very short pulses, would tell us the truth about this.
This also goes to show that there is probably no need for "nop nop" after writing to
TXREG, in order for TXSTA,1 (TRMT) to show valid results right after writing to
TXREG.
In fact, adding "nop" any amount of times after writing to TXREG seems to have no effect
whatever on the patter of PORTC (alter test_trmt.asm and make && make prog && make run to
confirm this)
